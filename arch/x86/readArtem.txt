  # Збірка ядра
x86_64-elf-gcc -Iinclude -ffreestanding -m64 -O2 -Wall -c kernel/kernel.c -o build/kernel.o

  # Лінкування в ELF
x86_64-elf-ld -nostdlib -T kernel/linker.ld -o build/kernel.elf build/kernel.o

  # Витяг у flat binary
x86_64-elf-objcopy -O binary build/kernel.elf iso/kernel.bin


Збірка завантажувача

run: boot.o boot.so boot.efi
	make clean

boot.o:
	gcc -Iinclude -I gnu-efi/inc -fpic -ffreestanding -fno-stack-protector -fno-stack-check -fshort-wchar -mno-red-zone -maccumulate-outgoing-args -c boot.c -o boot.o

boot.so:
	ld -shared -Bsymbolic -L gnu-efi/x86_64/lib -L gnu-efi/x86_64/gnuefi -T gnu-efi/gnuefi/elf_x86_64_efi.lds gnu-efi/x86_64/gnuefi/crt0-efi-x86_64.o boot.o -o boot.so -lgnuefi -lefi

boot.efi:
	objcopy -j .text -j .sdata -j .data -j .rodata -j .dynamic -j .dynsym  -j .rel -j .rela -j .rel.* -j .rela.* -j .reloc --target efi-app-x86_64 --subsystem=10 boot.so iso/EFI/BOOT/BOOTx64.EFI

clean:
	rm *.o *.so


запуск
  qemu-system-x86_64 \
        -drive if=pflash,format=raw,readonly=on,file=ovmf/OVMF_CODE.fd \
        -drive if=pflash,format=raw,file=ovmf/OVMF_VARS.fd \
        -hda fat:rw:iso \
        -m 512 \
        -vga std \
        -serial stdio
